#!/bin/bash

# Verify if file is being sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  echo "The init script must be sourced!"
  exit
fi

if [[ -f "~/.bashrc" ]]; then
  echo "Sourcing .bashrc"
  source ~/.bashrc
fi

# Parse arguments

PARAMS=""
PFSSPEC_ENV="default"
INIT_GIT_KEY="0"

while (( "$#" )); do
  case "$1" in
    -e|--env)
      PFSSPEC_ENV="$2"
      shift 2
      ;;
    -g|--init-git)
      INIT_GIT_KEY="0"
      shift
      ;;
    --no-init-git)
      INIT_GIT_KEY="0"
      shift
      ;;
    --) # end argument parsing
      shift
      break
      ;;
    *) # preserve all other arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done

# Verify / create configuration symlinks

if [[ ! -L configs ]]; then
  echo "Creating symlink to configurations"
  ln -s modules/config/configs configs
fi

# By default, do not use the LSST stack but this can be overridden
# from the environment config file

PFSSPEC_LSST="0"

# Source environment configs

if [[ -f "./configs/envs/$PFSSPEC_ENV.sh" ]]; then
  echo "Sourcing environment file $PFSSPEC_ENV"
  source "./configs/envs/$PFSSPEC_ENV.sh"
else
  echo "Environment file for $PFSSPEC_ENV not found. "
  exit 1
fi

# Add default modules to PFSSPEC_MODULES

export PFSSPEC_MODULES="pfsspec:${PFSSPEC_ROOT}:python
pfsspec-test:${PFSSPEC_ROOT}:test
${PFSSPEC_MODULES}"

# Construct the PYTHONPATH from the PFSSPEC_MODULES variable
# The modules are separated by spaces, and each module consists of
# a name, a path and a relative path to the python directory separated by colons.
echo "Setting up PYTHONPATH from development modules"
PFSSPEC_PYTHONPATH=""
for module in $PFSSPEC_MODULES; do
  mod_name=$(echo "$module" | cut -d':' -f1)
  mod_path=$(echo "$module" | cut -d':' -f2)
  mod_dir=$(echo "$module" | cut -d':' -f3)
  PFSSPEC_PYTHONPATH="${PFSSPEC_PYTHONPATH}:${mod_path}/${mod_dir}"
  echo "  added ${mod_name} to PYTHONPATH"
done

# Save PATH from the environment config file, because this should
# preceed the PATH set by conda environment activation.
PFSSPEC_PATH="$PATH"

# Save PYTHONPATH from the environment config file, because this should
# preceed the PYTHONPATH set by conda environment activation. Conda would
# put it at the end of the PYTHONPATH, which is not what we want.
PFSSPEC_PYTHONPATH="$PFSSPEC_PYTHONPATH:$PYTHONPATH"
unset PYTHONPATH

# Set up the conda environment
echo "Activating conda environment $PFSSPEC_CONDAENV"
source "$PFSSPEC_CONDAPATH/bin/activate" "$PFSSPEC_CONDAENV"

# When working with the LSST stack, create the eups package for each
# development module.
if [[ "$PFSSPEC_LSST" -eq "1" ]]; then
  if [[ -n "$PFSSPEC_MODULES" ]]; then
    echo "Creating up EUPS packages from development modules"
    for module in $PFSSPEC_MODULES; do
      mod_name=$(echo "$module" | cut -d':' -f1)
      mod_path=$(echo "$module" | cut -d':' -f2)
      mod_python=$(echo "$module" | cut -d':' -f3)
      
      # If the module has the ups directory, create the eups package
      if [[ -d "$mod_path/ups" ]]; then
        echo "  creating eups package for $mod_name"
        eups undeclare "$mod_name" dev --force >/dev/null
        pushd "$mod_path" >/dev/null
        eups declare "$mod_name" dev -r . --force 2>/dev/null
        popd >/dev/null
      fi
    done
  fi
fi

function sanitize_path() {
  # Remove duplicate entries from a colon-separated path string
  # Remove leading and trailing colons, and replace multiple colons with a single colon
  echo "$1" | awk -v RS=: -v ORS=: '!a[$0]++' | sed -e 's/::\+/:/g' -e 's/^://g' -e 's/:$//g'
}

# Create the new PATH and remove duplicates
export PATH=$(sanitize_path "$PFSSPEC_PATH:$PATH")

# Create the new PYTHONPATH with gapipe and pfsspec paths at the front
# Also remove duplicates
export PYTHONPATH=$(sanitize_path "$PFSSPEC_PYTHONPATH:$PYTHONPATH")

# Verify / create submodule symlinks and git configs

function init_git_module() {
    mod="$1"
    dir="$2"

    echo "Configuring git for repo $mod"
    pushd "modules/$dir" >/dev/null

    # Default merge strategy
    git config --unset pull.ff
    git config pull.rebase false

    # Configure git filter to remove notebook output
    # It requires a .gitattributes file under each submodule with contents:
    # `nb/**/*.ipynb filter=ipynb_stripout`
    git config --local filter.ipynb_stripout.clean "$(which python) $(git rev-parse --show-toplevel)/../../bin/ipynb_stripout"
    git config --local filter.ipynb_stripout.smudge cat
    git config --local filter.ipynb_stripout.required true

    popd >/dev/null
}

function link_module() {
    mod="$1"
    dir="$2"

    if [[ ! -L python/pfs/ga/pfsspec/$dir ]]; then
        echo "Creating symlink to module $mod, directory $dir"
        ln -s ../../../../modules/$mod/python/pfs/ga/pfsspec/$dir python/pfs/ga/pfsspec/$dir
    fi

    if [[ ! -L python/test/pfs/ga/pfsspec/$dir ]]; then
      echo "Creating symlink to tests for module $mod, directory $dir"
        ln -s ../../../../../modules/$mod/python/test/$dir python/test/pfs/ga/pfsspec/$dir
    fi

    if [[ ! -L scripts/$dir ]]; then
      echo "Creating symlink to scripts for module $mod, directory $dir"
        ln -s ../modules/$mod/scripts scripts/$dir
    fi

    if [[ ! -L nb/$dir ]]; then
      echo "Creating symlink to notebooks for module $mod, directory $dir"
        ln -s ../modules/$mod/nb nb/$dir
    fi

    if [[ ! -L docs/$dir ]]; then
      echo "Creating symlink to docs for module $mod, directory $dir"
        ln -s ../modules/$mod/docs docs/$dir
    fi

    init_git_module "$mod" "$dir"
}

link_module core core
link_module stellar stellar
link_module survey survey
link_module sim sim
link_module learn learn
link_module ws ws
link_module wsclient wsclient

######## GIT/SSH config ########################################################

# Check if the ssh-agent is running (or vscode configured its own) and
# loads the default ssh-key to be used with github. Also needs that 
# github.com is properly configured in ~/.ssh/config

function is_vscode_ssh_agent_socket_configured() {
  if [[ "$SSH_AUTH_SOCK" == *"vscode-ssh-auth-sock"* ]]; then
    return 0
  else
    return 1
  fi
}

function is_ssh_agent_running() {
  pgrep -x ssh-agent -u $UID > /dev/null
}

function check_ssh_key() {
  ssh-add -l 2> /dev/null | grep $1 1> /dev/null
}

# Initialize SSH key for github access, if requested

if [[ $INIT_GIT_KEY -eq "1" ]]; then
  SSH_KEY=$HOME/.ssh/id_rsa
  SSH_ENV=$HOME/.ssh/environment-$HOSTNAME

  # Start ssh-agent if it's not already running
  if is_vscode_ssh_agent_socket_configured; then
    echo "vscode ssh-agent already configured"
  else
    if is_ssh_agent_running; then
      echo "ssh-agent already running"
    else
      echo "Starting ssh-agent..."
      ssh-agent -s | sed 's/^echo/#echo/' > ${SSH_ENV}
      chmod 600 ${SSH_ENV}
    fi
    source ${SSH_ENV} > /dev/null
  fi

  # Add ssh-key to agent
  if check_ssh_key $SSH_KEY; then
    echo "Github ssh-key is already added."
  else
    echo "Adding Github ssh-key, please enter passphrase."
    ssh-add $SSH_KEY
  fi
fi

################################################################################

# Other settings

# Work around issues with saving weights when running on multiple threads
export HDF5_USE_FILE_LOCKING=FALSE

# Disable tensorflow deprecation warnings
export TF_CPP_MIN_LOG_LEVEL=3

# Enable more cores for numexpr (for single process operation only!)
# export NUMEXPR_MAX_THREADS=32

# Limit number of threads (for multiprocess computation only!)
# export NUMEXPR_MAX_THREADS=12
# export OMP_NUM_THREADS=12

################################################################################

# Generate .env file for vscode python debugging
cat > .env <<EOF
PATH="$PATH"
PYTHONPATH="$PYTHONPATH"
LD_LIBRARY_PATH="$LD_LIBRARY_PATH"
LD="$LD"

DISPLAY="$DISPLAY"

CUDA_VISIBLE_DEVICES="$CUDA_VISIBLE_DEVICES"

PFSSPEC_ROOT="$PFSSPEC_ROOT"
PFSSPEC_DATA="$PFSSPEC_DATA"
PFSSPEC_TEST="$PFSSPEC_TEST"

PFSSPEC_PFS_DATADIR="$PFSSPEC_PFS_DATADIR"
PFSSPEC_PFS_RERUNDIR="$PFSSPEC_PFS_RERUNDIR"
PFSSPEC_PFS_RERUN="$PFSSPEC_PFS_RERUN"
PFSSPEC_PFS_DESIGNDIR="$PFSSPEC_PFS_DESIGNDIR"
PFSSPEC_PFS_CONFIGDIR="$PFSSPEC_PFS_CONFIGDIR"

BUTLER_CONFIGDIR="$BUTLER_CONFIGDIR"
BUTLER_COLLECTIONS="$BUTLER_COLLECTIONS"

PYSYN_CDBS="$PYSYN_CDBS"
EOF

# Write bash history to project root
export HISTFILE="$PFSSPEC_ROOT/.bash_history.$$"
export HISTSIZE=10000

cd $PFSSPEC_ROOT

echo "Configured environment for PFS development."
echo "Data directory is $PFSSPEC_DATA"

pushd . > /dev/null
